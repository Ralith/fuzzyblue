// Precompute atmospheric transmittance
#version 450

layout(local_size_x = 8, local_size_y = 8) in;

#include "transmittance.h"

float ComputeOpticalLengthToTopAtmosphereBoundary(
    AtmosphereParameters atmosphere, DensityProfile profile,
    float r, float mu) {
    // assert(r >= atmosphere.bottom_radius && r <= atmosphere.top_radius);
    // assert(mu >= -1.0 && mu <= 1.0);
    // Number of intervals for the numerical integration.
    const int SAMPLE_COUNT = 500;
    // The integration step, i.e. the length of each integration interval.
    float dx =
        DistanceToTopAtmosphereBoundary(atmosphere, r, mu) / SAMPLE_COUNT;
    // Integration loop.
    float result = 0.0;
    for (int i = 0; i <= SAMPLE_COUNT; ++i) {
        float d_i = i * dx;
        // Distance between the current sample point and the planet center.
        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);
        // Number density at the current sample point (divided by the number density
        // at the bottom of the atmosphere, yielding a dimensionless number).
        float y_i = GetProfileDensity(profile, r_i - atmosphere.bottom_radius);
        // Sample weight (from the trapezoidal rule).
        float weight_i = i == 0 || i == SAMPLE_COUNT ? 0.5 : 1.0;
        result += y_i * weight_i * dx;
    }
    return result;
}

vec3 ComputeTransmittanceToTopAtmosphereBoundary(AtmosphereParameters atmosphere, float r, float mu) {
    // assert(r >= atmosphere.bottom_radius && r <= atmosphere.top_radius);
    // assert(mu >= -1.0 && mu <= 1.0);
    return exp(-(atmosphere.rayleigh_scattering *
                 ComputeOpticalLengthToTopAtmosphereBoundary(
                     atmosphere, atmosphere.rayleigh_density, r, mu) +
                 atmosphere.mie_extinction *
                 ComputeOpticalLengthToTopAtmosphereBoundary(
                     atmosphere, atmosphere.mie_density, r, mu) +
                 atmosphere.absorption_extinction *
                 ComputeOpticalLengthToTopAtmosphereBoundary(
                     atmosphere, atmosphere.absorption_density, r, mu)));
}

vec2 GetRMuFromUnitRanges(AtmosphereParameters atmosphere, float x_mu, float x_r) {
    // Distance to top atmosphere boundary for a horizontal ray at ground level.
    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -
                   atmosphere.bottom_radius * atmosphere.bottom_radius);
    // Distance to the horizon, from which we can compute r:
    float rho = H * x_r;
    float r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);
    // Distance to the top atmosphere boundary for the ray (r,mu), and its minimum
    // and maximum values over all mu - obtained for (r,1) and (r,mu_horizon) -
    // from which we can recover mu:
    float d_min = atmosphere.top_radius - r;
    float d_max = rho + H;
    float d = d_min + x_mu * (d_max - d_min);
    float mu = d == 0.0 ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * r * d);
    mu = ClampCosine(mu);
    return vec2(r, mu);
}

layout (set=0, binding=0) uniform Params {
    AtmosphereParameters atmosphere;
};
layout (set=1, binding=0, rgba16f) uniform writeonly image2D table;

void main() {
    if (any(greaterThanEqual(gl_GlobalInvocationID.xy, uvec2(atmosphere.transmittance_texture_mu_size, atmosphere.transmittance_texture_r_size)))) {
        return;
    }
    float x_mu = gl_GlobalInvocationID.x / float(atmosphere.transmittance_texture_mu_size - 1);
    float x_r = gl_GlobalInvocationID.y / float(atmosphere.transmittance_texture_r_size - 1);
    vec2 rmu = GetRMuFromUnitRanges(atmosphere, x_mu, x_r);
    vec3 result = ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, rmu.x, rmu.y);
    imageStore(table, ivec2(gl_GlobalInvocationID.xy), vec4(result, 1));
}
