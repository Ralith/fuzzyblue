#version 450

#include "params.h"
#include "scattering.h"
#include "transmittance.h"
#include "irradiance.h"

vec3 ComputeScatteringDensity(
    AtmosphereParameters atmosphere,
    sampler2D transmittance_texture,
    sampler3D single_rayleigh_scattering_texture,
    sampler3D single_mie_scattering_texture,
    sampler3D multiple_scattering_texture,
    sampler2D irradiance_texture,
    float r, float mu, float mu_s, float nu, int scattering_order) {
    // assert(r >= atmosphere.bottom_radius && r <= atmosphere.top_radius);
    // assert(mu >= -1.0 && mu <= 1.0);
    // assert(mu_s >= -1.0 && mu_s <= 1.0);
    // assert(nu >= -1.0 && nu <= 1.0);
    // assert(scattering_order >= 2);

    // Compute unit direction vectors for the zenith, the view direction omega and
    // and the sun direction omega_s, such that the cosine of the view-zenith
    // angle is mu, the cosine of the sun-zenith angle is mu_s, and the cosine of
    // the view-sun angle is nu. The goal is to simplify computations below.
    vec3 zenith_direction = vec3(0.0, 0.0, 1.0);
    vec3 omega = vec3(sqrt(1.0 - mu * mu), 0.0, mu);
    float sun_dir_x = omega.x == 0.0 ? 0.0 : (nu - mu * mu_s) / omega.x;
    float sun_dir_y = sqrt(max(1.0 - sun_dir_x * sun_dir_x - mu_s * mu_s, 0.0));
    vec3 omega_s = vec3(sun_dir_x, sun_dir_y, mu_s);

    const int SAMPLE_COUNT = 16;
    const float dphi = PI / float(SAMPLE_COUNT);
    const float dtheta = PI / float(SAMPLE_COUNT);
    // watt_per_cubic_meter_per_sr_per_nm
    vec3 rayleigh_mie = vec3(0.0);

    // Nested loops for the integral over all the incident directions omega_i.
    for (int l = 0; l < SAMPLE_COUNT; ++l) {
        float theta = (float(l) + 0.5) * dtheta;
        float cos_theta = cos(theta);
        float sin_theta = sin(theta);
        bool ray_r_theta_intersects_ground =
            RayIntersectsGround(atmosphere, r, cos_theta);

        // The distance and transmittance to the ground only depend on theta, so we
        // can compute them in the outer loop for efficiency.
        float distance_to_ground = 0.0;
        vec3 transmittance_to_ground = vec3(0.0);
        vec3 ground_albedo = vec3(0.0);
        if (ray_r_theta_intersects_ground) {
            distance_to_ground =
                DistanceToBottomAtmosphereBoundary(atmosphere, r, cos_theta);
            transmittance_to_ground =
                GetTransmittance(atmosphere, transmittance_texture, r, cos_theta,
                                 distance_to_ground, true /* ray_intersects_ground */);
            ground_albedo = atmosphere.ground_albedo;
        }

        for (int m = 0; m < 2 * SAMPLE_COUNT; ++m) {
            float phi = (float(m) + 0.5) * dphi;
            vec3 omega_i =
                vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);
            float domega_i = dtheta * dphi * sin(theta);

            // The radiance L_i arriving from direction omega_i after n-1 bounces is
            // the sum of a term given by the precomputed scattering texture for the
            // (n-1)-th order:
            float nu1 = dot(omega_s, omega_i);
            vec3 incident_radiance = GetScattering(atmosphere,
                                                   single_rayleigh_scattering_texture, single_mie_scattering_texture,
                                                   multiple_scattering_texture, r, omega_i.z, mu_s, nu1,
                                                   ray_r_theta_intersects_ground, scattering_order - 1);

            // and of the contribution from the light paths with n-1 bounces and whose
            // last bounce is on the ground. This contribution is the product of the
            // transmittance to the ground, the ground albedo, the ground BRDF, and
            // the irradiance received on the ground after n-2 bounces.
            vec3 ground_normal =
                normalize(zenith_direction * r + omega_i * distance_to_ground);
            vec3 ground_irradiance = GetIrradiance(
                atmosphere, irradiance_texture, atmosphere.bottom_radius,
                dot(ground_normal, omega_s));
            incident_radiance += transmittance_to_ground *
                ground_albedo * (1.0 / PI) * ground_irradiance;

            // The radiance finally scattered from direction omega_i towards direction
            // -omega is the product of the incident radiance, the scattering
            // coefficient, and the phase function for directions omega and omega_i
            // (all this summed over all particle types, i.e. Rayleigh and Mie).
            float nu2 = dot(omega, omega_i);
            float rayleigh_density = GetProfileDensity(
                atmosphere.rayleigh_density, r - atmosphere.bottom_radius);
            float mie_density = GetProfileDensity(
                atmosphere.mie_density, r - atmosphere.bottom_radius);
            rayleigh_mie += incident_radiance * (
                atmosphere.rayleigh_scattering * rayleigh_density *
                RayleighPhaseFunction(nu2) +
                atmosphere.mie_scattering * mie_density *
                MiePhaseFunction(atmosphere.mie_phase_function_g, nu2)) *
                domega_i;
        }
    }
    return rayleigh_mie;
}

vec3 ComputeScatteringDensityTexture(
    AtmosphereParameters atmosphere,
    sampler2D transmittance_texture,
    sampler3D single_rayleigh_scattering_texture,
    sampler3D single_mie_scattering_texture,
    sampler3D multiple_scattering_texture,
    sampler2D irradiance_texture,
    vec3 frag_coord, int scattering_order) {
    float r;
    float mu;
    float mu_s;
    float nu;
    bool ray_r_mu_intersects_ground;
    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, frag_coord,
                                              r, mu, mu_s, nu, ray_r_mu_intersects_ground);
    return ComputeScatteringDensity(atmosphere, transmittance_texture,
                                    single_rayleigh_scattering_texture, single_mie_scattering_texture,
                                    multiple_scattering_texture, irradiance_texture, r, mu, mu_s, nu,
                                    scattering_order);
}

layout (set=0, binding=0) uniform Params {
    AtmosphereParameters atmosphere;
};

layout (set=1, binding=0) uniform sampler2D transmittance_texture;
layout (set=1, binding=1) uniform sampler3D single_rayleigh_scattering_texture;
layout (set=1, binding=2) uniform sampler3D single_mie_scattering_texture;
layout (set=1, binding=3) uniform sampler3D multiple_scattering_texture;
layout (set=1, binding=4) uniform sampler2D irradiance_texture;
layout (set=1, binding=5, rgba16f) uniform writeonly image3D scattering_density;
layout (push_constant) uniform PerOrder {
    int scattering_order;
};

void main() {
    vec3 frag_coord;
    if (!GetScatteringFragCoord(atmosphere, gl_GlobalInvocationID, frag_coord)) {
        return;
    }
    vec3 density = ComputeScatteringDensityTexture(
        atmosphere, transmittance_texture, single_rayleigh_scattering_texture,
        single_mie_scattering_texture, multiple_scattering_texture,
        irradiance_texture, frag_coord,
        scattering_order);
    imageStore(scattering_density, ivec3(gl_GlobalInvocationID), vec4(density, 0.0));
}
